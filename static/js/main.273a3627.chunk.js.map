{"version":3,"sources":["components/LoginWindow.js","components/Button.js","components/ErrorMessage.js","components/constatns.js","components/Login/Login.jsx","components/Message/Message.jsx","components/Main/Cards.jsx","components/Main/Filters.jsx","components/Header.jsx","components/Main/Main.jsx","components/Pokemon/Pokemon.jsx","App.js","serviceWorker.js","index.js"],"names":["Wrap","css","div","Window","LoginLabels","label","LoginInputs","input","BtnWrap","Btn","button","Error","mainPath","Login","props","useState","login","setLogin","password","setPassword","loginValue","setLoginValue","passwordValue","setPasswordValue","validate","setValidate","localStorage","setItem","to","onSubmit","e","preventDefault","value","type","onChange","target","Message","message","setMessage","messageValue","setMessageValue","CardsWrap","styled","CardImage","CardWrap","CardName","h3","CardArtist","Card","img","name","artist","id","src","alt","className","Cards","pokemons","map","p","index","key","imageUrl","FiltersWrap","Type","select","Filters","currentType","setCurrentType","currentSubtype","setCurrentSubtype","HeaderWrap","Header","path","onClick","MainContainer","Main","setPokemons","location","pathname","useEffect","axios","then","response","data","cards","console","log","catch","err","Img","Container","Subtitle","Features","Text","Pokemon","pokemon","setPokemon","split","card","imageUrlHiRes","types","subtype","attacks","damage","cost","evolvesFrom","App","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.273a3627.chunk.js","sourcesContent":["import css from 'styled-components';\n\nexport const Wrap = css.div`\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   width: 100wh;\n   height: 100vh;\n   background-color:#333;\n`;\nexport const Window = css.div`\n   border: 2px solid #9f1aac;\n   border-radius: 5px;\n   width: 400px;\n   height: 40vh;\n   padding: 20px 60px;\n`;\nexport const LoginLabels = css.label`\n   width: 100%;\n   display: block;\n   margin-bottom: 15px;\n   color:#fff;\n`;\nexport const LoginInputs = css.input`\n   width:100%;\n   margin-bottom: 30px;\n   `;\nexport const BtnWrap = css.div`\n   margin-top: 80px;\n   width: 100%;\n   display: flex;\n   align-items: center;  \n   justify-content: center;\n`;","import css from 'styled-components';\n\nexport const Btn = css.button`\n   width: 170px;\n   height: 50px;\n   background-color: #444141;\n   color:#fff;\n   border: 2px solid #9f1aac;\n   border-radius: 3px;\n   font-size: 16px;\n   text-transform: uppercase;\n   transition: background-color .2s, color .2s;\n   &:hover{\n      background-color:#fff;\n      color:#9f1aac;\n   }\n`;\n","import css from 'styled-components';\n\nexport const Error = css.div`\n   margin-left: 20px;\n   color: #fff;\n`;","export const loginPath = '/KODE-test/';\nexport const messagePath = '/KODE-test/message';\nexport const mainPath = '/KODE-test/main';\nexport const pokemonPath = '/KODE-test/pokemon';\n","import React from 'react'\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { BtnWrap, LoginInputs, LoginLabels, Window, Wrap } from '../LoginWindow';\nimport {Btn} from '../Button';\nimport {Error} from '../ErrorMessage';\nimport {messagePath} from '../constatns';\n\nconst Login = (props) => {\n  const [login, setLogin] = useState('');\nconst [password, setPassword] = useState('');\nconst [loginValue, setLoginValue] = useState('');\nconst [passwordValue, setPasswordValue] = useState('');\nconst [validate, setValidate] = useState(false);\n\nconst submit = (e) => {\n   e.preventDefault();\n   setLogin(loginValue);\n   setPassword(passwordValue);\n   if ((login !== 'kode@kode.ru') || (password !== 'Enk0deng')) {\n      \n      setValidate('Error')\n   }\n}\nif ((login === 'kode@kode.ru') && (password === 'Enk0deng')){\n   localStorage.setItem('login', login);\n   return <Redirect to = {messagePath}/>;\n} \n   \n   \n   \n   \n   return <Wrap>\n   <Window>\n      <form onSubmit = {submit}>\n      <LoginLabels >Login</LoginLabels>\n      <LoginInputs value = {loginValue} type = 'text' onChange = {e => setLoginValue(e.target.value)}/>\n      <LoginLabels >Password</LoginLabels>\n      <LoginInputs value = {passwordValue} type = 'password' onChange = {e => setPasswordValue(e.target.value)}/>\n   \n        <BtnWrap>\n        <Btn type = 'submit'>Submit</Btn>\n        \n        {(validate === 'Error') ? <Error>Ошибка</Error>: null}\n        </BtnWrap>\n      </form>\n   </Window>\n</Wrap>   \n}\n\nexport default Login;","import React from 'react'\nimport { useState } from 'react';\nimport { BtnWrap, LoginInputs, LoginLabels, Window, Wrap } from '../LoginWindow';\nimport {Btn} from '../Button';\nimport { Redirect } from 'react-router-dom';\nimport {mainPath} from '../constatns';\n\nconst Message = props => {\n   const [message, setMessage] = useState(null);\n   const [messageValue, setMessageValue] = useState('');\n\n   const submit = (e) => {\n      e.preventDefault();\n      setMessage(messageValue);\n   }\n   if (message === '123456') return <Redirect to = {mainPath} />;\n   \n   return <Wrap>\n   <Window>\n      <form onSubmit = {submit} >\n      <LoginLabels >Code from SMS</LoginLabels>\n      <LoginInputs type = 'text' value = {messageValue} onChange = {e => setMessageValue(e.target.value)}/>\n      \n   \n        <BtnWrap>\n        <Btn type = 'submit'>Submit</Btn>\n        </BtnWrap>\n      </form>\n   </Window>\n</Wrap>   \n}\n\nexport default Message;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport '../../link.css';\nimport {pokemonPath} from '../constatns';\n\nconst CardsWrap = styled.div`\n        display:flex;\n        flex-wrap:wrap;\n        width: 60%;     \n        margin-left: 20px;\n`;\nconst CardImage = styled.div`\n`;\nconst CardWrap = styled.div`\nwidth: 50%;\n`;\nconst CardName = styled.h3`\ncolor:#fff;\n`;\nconst CardArtist = styled.h3`\ncolor:#fff;\n`;\n\nconst Card = ({img, name, artist, id}) =>{\n        \n        return <CardWrap>\n                <CardImage><img src = {img} alt = {name}/></CardImage>\n                <CardName><Link className = 'link' to ={`${pokemonPath}/${id}`} >{name}</Link></CardName>\n                <CardArtist >{artist}</CardArtist>\n        </CardWrap>\n}\n\nconst Cards = props => {\n\n        return <CardsWrap>\n                {props.pokemons ? props.pokemons.map((p, index) => (index < 10) ? <Card id = {p.id} key = {index} img = {p.imageUrl} name = {p.name} artist = {p.artist}/>: null):null}\n        </CardsWrap>\n}\n\nexport default Cards;","import React from 'react';\nimport { useState } from 'react';\nimport styled from 'styled-components';\n\nconst FiltersWrap = styled.div`\n\nwidth: 30%;\nmargin-left: 5em;\n\n`;\nconst Type = styled.select`\nmargin:120px;\n`;\nconst Filters = (props) => {\n        const [currentType, setCurrentType] = useState(\"type\");\n        const [currentSubtype, setCurrentSubtype] = useState(\"subtype\");\n        const changeType = (value) => {\n                setCurrentType(value);\n        }\n        const changeSubtype = (value) => {\n                setCurrentSubtype(value);\n        }\n        return <FiltersWrap>\n                <Type value = {currentType} onChange = {e => changeType(e.target.value)} >\n                        <option value=\"type\">Type</option>\n                        <option value=\"colorless\">Colorless</option>\n                        <option value=\"darkness\">Darkness</option>\n                        <option value=\"dragon\">Dragon</option>\n                        <option value=\"fairy\">Fairy</option>\n                        <option value=\"fighting\">Fighting</option>\n                        <option value=\"fire\">Fire</option>\n                        <option value=\"grass\">Grass</option>\n                        <option value=\"lightning\">Lightning</option>\n                        <option value=\"metal\">Metal</option>\n                        <option value=\"psychic\">Psychic</option>\n                        <option value=\"water\">Water</option>\n                </Type>\n                <select value = {currentSubtype} onChange = {e => changeSubtype(e.target.value)}>\n                        <option value=\"subtype\">Subtype</option>\n                        <option value=\"ex\">EX</option>\n                        <option value=\"special\">Special</option>\n                        <option value=\"restored\">Restored</option>\n                        <option value=\"levelUp\">Level Up</option>\n                        <option value=\"technicalMachine\">MEGA</option>\n                        <option value=\"item\">Item</option>\n                        <option value=\"stadium\">Stadium</option>\n                        <option value=\"supporter\">Supporter</option>\n                        <option value=\"stageOne\">Stage 1</option>\n                        <option value=\"gx\">GX</option>\n                        <option value=\"pokemonTool\">Pokémon Tool</option>\n                        <option value=\"basic\">Basic</option>\n                        <option value=\"legend\">LEGEND</option>\n                        <option value=\"stageTwo\">Stage 2</option>\n                        <option value=\"break\">BREAK</option>\n                        <option value=\"rsm\">Rocket's Secret Machine</option>\n                </select>\n        </FiltersWrap>\n}\n\nexport default Filters;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport '../link.css';\nimport {mainPath, loginPath} from './constatns';\n\nconst HeaderWrap = styled.div`\nmargin: 20px 5em;\nborder: 2px solid #9f1aac;\nheight: 120px;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\npadding: 0 2em;\n`;\nconst Header = props => {\n        const unSubscribe = () =>{\n                delete localStorage.login;\n        }\n        return <HeaderWrap>\n                {(props.path !== mainPath)? <Link className='link' to = {mainPath}>Back</Link>: null}\n                <Link className='link' to = {loginPath} onClick = {unSubscribe}>Logout</Link></HeaderWrap>\n}\n\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport * as axios from 'axios';\nimport styled from 'styled-components';\nimport Cards from './Cards';\nimport Filters from './Filters';\nimport Header from '../Header';\nimport { Redirect } from 'react-router-dom';\nimport {loginPath} from '../constatns';\n\nconst Wrap = styled.div`\n   position: absolute;\n   top: 0;\n\tleft: 0;\n   width: 100%;\n   background-color:#333;\n   min-height:100vh;\n`;\nconst MainContainer = styled.div`\n   display:flex;\n   width: 100%;\n`;\n\nconst Main = props => {\n   const [pokemons, setPokemons] = useState(null);\n   const path = props.location.pathname;\n\n   useEffect(() => {\n      axios.get('https://api.pokemontcg.io/v1/cards')\n      .then(response => {\n         setPokemons(response.data.cards);\n         \n         \n         console.log(response.data);\n         console.log('Pokemons ',pokemons )\n      })\n      .catch(err => console.log(err))\n   }, [])\n   console.log('Pokemons ',pokemons )\n   if (!localStorage.login) return <Redirect to = {loginPath} />;\n\n   return <Wrap>\n      <Header path = {path}/>\n      <MainContainer>\n         <Filters />\n         <Cards pokemons = {pokemons} />\n      </MainContainer>\n   </Wrap>\n}\n\nexport default Main;","import React, { useEffect, useState } from 'react'\nimport * as axios from 'axios';\nimport styled from 'styled-components';\nimport Header from '../Header';\nimport { Redirect } from 'react-router-dom';\nimport {loginPath} from '../constatns';\n\nconst Wrap = styled.div`\n   position: absolute;\n   top: 0;\n\tleft: 0;\n   width: 100%;\n   background-color:#333;\n   min-height:100vh;\n`;\n\nconst Img = styled.img`\n   max-height: 50vh;\n   \n`;\nconst Container = styled.div`\ndisplay: flex;\njustify-content: center;\n`;\nconst Subtitle = styled.h3`\n   color:#fff;\n`;\nconst Features = styled.div`\nmargin-left: 200px;\n`;\nconst Text = styled.p`\ncolor:#fff;\nmargin: 2em 5em 0;\nfont-size: 24px;\n`;\nconst Pokemon = props => {\n   const [pokemon, setPokemon] = useState(null);\n   const path = props.location.pathname;\n   const id = path.split('/');\n\n   useEffect(() => {\n      axios.get(`https://api.pokemontcg.io/v1/cards/${id[3]}`)\n      .then(response => {\n         console.log(response.data);\n         setPokemon(response.data.card);\n      })\n      .catch(err => console.log(err))\n   }, [])\n\n   if (!localStorage.login) return <Redirect to = {loginPath} />;\n\n   return <Wrap>\n      <Header path = {path}/>\n      \n         {pokemon ? \n         <Container>\n         <Img src = {pokemon.imageUrlHiRes}/>\n         <Features >\n            <Subtitle>Name: {pokemon.name}</Subtitle>\n            <Subtitle>Type: {pokemon.types[0]}</Subtitle>\n            <Subtitle>Subtype: {pokemon.subtype}</Subtitle>\n            <br />\n            <Subtitle>Damage: {pokemon.attacks[0].damage}</Subtitle>\n            <Subtitle>Cost: {pokemon.attacks[0].cost[0]}</Subtitle>\n            <Subtitle>Evolve: {pokemon.evolvesFrom}</Subtitle>\n         </Features>\n         </Container> :\n          null}\n      <Text>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Accusantium earum eum ab, rem laboriosam, eius voluptates quidem obcaecati nesciunt doloribus ullam dignissimos provident consequuntur animi amet quia at dolorum. Delectus aspernatur dolorem ipsa. Asperiores voluptates incidunt itaque provident iure earum reprehenderit quas ipsa, repudiandae qui dolorem voluptate blanditiis! Iste, esse molestiae. Nam, accusantium vitae pariatur temporibus dolorum ea eius beatae, illo, optio vel mollitia!</Text>\n   </Wrap>\n}\n\nexport default Pokemon;","import React, { useState } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './components/Login/Login';\nimport Message from './components/Message/Message';\nimport Main from './components/Main/Main';\nimport Pokemon from './components/Pokemon/Pokemon';\nimport {loginPath, messagePath, mainPath, pokemonPath} from './components/constatns';\nfunction App() {\n   \n  return (\n    <BrowserRouter >\n    <Switch>\n    \n      <Route exact path = {loginPath} component = {Login} />\n      <Route path = {messagePath} component = {Message} />\n      <Route path = {mainPath}  component = {Main} />\n      <Route path = {pokemonPath} component = {Pokemon} />\n    \n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}